/*
 * Generation info:
 *   - generator version: N/A
 *   - datetime: 2023-06-19T00:00Z[UTC]
 */

package org.openapitools.model;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import javax.validation.Valid;

import io.swagger.annotations.*;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonTypeName;



@JsonTypeName("Parent")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJAXRSSpecServerCodegen", date = "2023-06-19T00:00Z[UTC]")
public class Parent   {


  public enum EnumBaseInObjectWithPrefix {

    ENUM1(String.valueOf("ENUM_BASE_IN_OBJECT_WITH_PREFIX_ENUM1")), ENUM2(String.valueOf("ENUM_BASE_IN_OBJECT_WITH_PREFIX_ENUM2")), ENUM3(String.valueOf("ENUM_BASE_IN_OBJECT_WITH_PREFIX_ENUM3"));


    private String value;

    EnumBaseInObjectWithPrefix (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    @JsonValue
    public String toString() {
        return String.valueOf(value);
    }

    /**
     * Convert a String into String, as specified in the
     * <a href="https://download.oracle.com/otndocs/jcp/jaxrs-2_0-fr-eval-spec/index.html">See JAX RS 2.0 Specification, section 3.2, p. 12</a>
     */
	public static EnumBaseInObjectWithPrefix fromString(String s) {
        for (EnumBaseInObjectWithPrefix b : EnumBaseInObjectWithPrefix.values()) {
            // using Objects.toString() to be safe if value type non-object type
            // because types like 'int' etc. will be auto-boxed
            if (java.util.Objects.toString(b.value).equals(s)) {
                return b;
            }
        }
        throw new IllegalArgumentException("Unexpected string value '" + s + "'");
	}

    @JsonCreator
    public static EnumBaseInObjectWithPrefix fromValue(String value) {
        for (EnumBaseInObjectWithPrefix b : EnumBaseInObjectWithPrefix.values()) {
            if (b.value.equals(value)) {
                return b;
            }
        }
        throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
}


    private @Valid EnumBaseInObjectWithPrefix enumBaseInObjectWithPrefix;

  /**
   **/
  public Parent enumBaseInObjectWithPrefix(EnumBaseInObjectWithPrefix enumBaseInObjectWithPrefix) {
    this.enumBaseInObjectWithPrefix = enumBaseInObjectWithPrefix;
    return this;
  }



      @ApiModelProperty(value = "")
  @JsonProperty("EnumBaseInObjectWithPrefix")
  public EnumBaseInObjectWithPrefix getEnumBaseInObjectWithPrefix() {
    return enumBaseInObjectWithPrefix;
  }

  @JsonProperty("EnumBaseInObjectWithPrefix")
  public void setEnumBaseInObjectWithPrefix(EnumBaseInObjectWithPrefix enumBaseInObjectWithPrefix) {
    this.enumBaseInObjectWithPrefix = enumBaseInObjectWithPrefix;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parent parent = (Parent) o;
    return Objects.equals(this.enumBaseInObjectWithPrefix, parent.enumBaseInObjectWithPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enumBaseInObjectWithPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parent {\n");

        sb.append("    enumBaseInObjectWithPrefix: ").append(toIndentedString(enumBaseInObjectWithPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }




  }

